AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Clinnet-EMR

  SAM Template for Clinnet-EMR backend services

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name (dev, test, prod)

Globals:
  Function:
    Timeout: 30
    Runtime: python3.12
    MemorySize: 128
    Environment:
      Variables:
        PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
        USERS_TABLE: !Ref UsersTable
        SERVICES_TABLE: !Ref ServicesTable
        APPOINTMENTS_TABLE: !Ref AppointmentsTable
        DOCUMENTS_BUCKET: !Ref DocumentsBucket
        ENVIRONMENT: !Ref Environment
        USER_POOL_ID: !Ref UserPool
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'" # Added inner single quotes
      AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'" # Added inner single quotes
      AllowOrigin: "'*'" # Added inner single quotes
      # MaxAge: "600" # Optional: You can uncomment and set this
      # AllowCredentials: true # Optional: Uncomment if you need to handle cookies/credentials

Resources:
  # DynamoDB Table for Patients and Medical Records (hybrid single-table design)
  PatientRecordsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub clinnet-patient-records-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: type-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub clinnet-users-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ServicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub clinnet-services-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub clinnet-appointments-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # S3 Bucket for document storage
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub clinnet-documents-${Environment}-${AWS::AccountId}-${AWS::Region}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: ExpireTemporaryFiles
            Status: Enabled
            ExpirationInDays: 30 # Automatically delete objects after 30 days

  # API Gateway
  ClinicAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment # Use the Environment parameter for stage name
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'" # Added inner single quotes
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'" # Added inner single quotes
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'" # Added inner single quotes
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'" # Added inner single quotes
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'" # Added inner single quotes
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'" # Added inner single quotes

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub clinnet-user-pool-${Environment}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: role # Using custom attribute for role
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: profile_image # Custom attribute for profile image
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub clinnet-app-client-${Environment}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  # Lambda Functions for Services
  GetServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: get_services.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
      Events:
        GetServices:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services
            Method: get
            Auth:
              Authorizer: NONE # Services endpoint is public

  GetServiceByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: get_service_by_id.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
      Events:
        GetServiceById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services/{id}
            Method: get
            Auth:
              Authorizer: NONE # Getting a specific service is public

  CreateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: create_service.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Events:
        CreateService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services
            Method: post
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  UpdateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: update_service.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Events:
        UpdateService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services/{id}
            Method: put
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  DeleteServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: delete_service.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Events:
        DeleteService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services/{id}
            Method: delete
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  # Lambda Functions for Patients
  GetPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.get_patients.lambda_handler # Adjusted handler path
      Environment:
        Variables:
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PatientRecordsTable
      Events:
        GetPatients:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect patient list
    DependsOn: PatientRecordsTable

  GetPatientByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.get_patient_by_id.lambda_handler # Adjusted handler path
      Environment:
        Variables:
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PatientRecordsTable
      Events:
        GetPatientById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect specific patient

  CreatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.create_patient.lambda_handler # Adjusted handler path
      Environment:
        Variables:
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientRecordsTable
      Events:
        CreatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients
            Method: post
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  UpdatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.update_patient.lambda_handler # Adjusted handler path
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientRecordsTable
      Events:
        UpdatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients/{id}
            Method: put
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  DeletePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.delete_patient.lambda_handler # Adjusted handler path
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientRecordsTable
      Events:
        DeletePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients/{id}
            Method: delete
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

   # Lambda Functions for User Management
  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: list_users.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
      Events:
        ListUsers:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: create_cognito_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: update_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminEnableUser
                - cognito-idp:AdminDisableUser
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{username}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: delete_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminDeleteUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{username}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  EnableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: enable_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminEnableUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        EnableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{username}/enable
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  DisableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: disable_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminDisableUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DisableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{username}/disable
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Lambda Functions for Profile Image Management
  UploadProfileImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: upload_profile_image.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub "${DocumentsBucket.Arn}/profile-images/*"
      Events:
        UploadProfileImage:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/profile-image
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  GetProfileImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: get_profile_image.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "${DocumentsBucket.Arn}/profile-images/*"
      Events:
        GetProfileImage:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/profile-image
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # Lambda Functions for Appointments
  GetAppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: get_appointments.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        GetAppointments:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect appointment list

  GetAppointmentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: get_appointment_by_id.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        GetAppointmentById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect specific appointment

  CreateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: create_appointment.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        CreateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments
            Method: post
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  UpdateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: update_appointment.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        UpdateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments/{id}
            Method: put
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  DeleteAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: delete_appointment.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        DeleteAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments/{id}
            Method: delete
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

Outputs:
  ClinicAPI:
    Description: "API Gateway endpoint URL for the current environment"
    Value: !Sub "https://${ClinicAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"

  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"

  DocumentsBucket:
    Description: "S3 bucket for document storage"
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub "${AWS::StackName}-DocumentsBucket"

  Region:
    Description: "AWS Region"
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${AWS::StackName}-Region"